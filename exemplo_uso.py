#!/usr/bin/env python3
"""
Exemplo de uso do TalentScan
Este script demonstra como usar a aplica√ß√£o programaticamente
"""
import os
import sys
from talent_scan import TalentScan

def exemplo_basico():
    """Exemplo b√°sico de uso"""
    print("=== EXEMPLO B√ÅSICO DE USO DO TALENTSCAN ===")
    
    # Criar inst√¢ncia da aplica√ß√£o
    app = TalentScan()
    
    # Caminhos dos arquivos (ajuste conforme necess√°rio)
    curriculos_dir = "curriculos_exemplo"
    perfil_file = "perfil_vaga_exemplo.txt"
    output_file = "relatorio_exemplo.xlsx"
    
    # Verificar se os diret√≥rios/arquivos existem
    if not os.path.exists(curriculos_dir):
        print(f"‚ùå Diret√≥rio de curr√≠culos n√£o encontrado: {curriculos_dir}")
        print("   Crie o diret√≥rio e adicione alguns curr√≠culos PDF/DOCX")
        return
    
    if not os.path.exists(perfil_file):
        print(f"‚ùå Arquivo de perfil n√£o encontrado: {perfil_file}")
        print("   Use o arquivo perfil_vaga_exemplo.txt como modelo")
        return
    
    try:
        # Executar an√°lise
        print(f"üìÅ Processando curr√≠culos em: {curriculos_dir}")
        print(f"üìã Usando perfil: {perfil_file}")
        print(f"üìä Gerando relat√≥rio: {output_file}")
        print()
        
        app.run(curriculos_dir, perfil_file, output_file)
        
        print()
        print("‚úÖ An√°lise conclu√≠da com sucesso!")
        print(f"üìÑ Relat√≥rio salvo em: {output_file}")
        
    except Exception as e:
        print(f"‚ùå Erro durante a execu√ß√£o: {e}")

def exemplo_avancado():
    """Exemplo avan√ßado com controle individual dos passos"""
    print("\n=== EXEMPLO AVAN√áADO DE USO ===")
    
    try:
        # Criar inst√¢ncia da aplica√ß√£o
        app = TalentScan()
        
        # Carregar perfil da vaga
        perfil_file = "perfil_vaga_exemplo.txt"
        if not os.path.exists(perfil_file):
            print(f"‚ùå Arquivo de perfil n√£o encontrado: {perfil_file}")
            return
        
        print("üìã Carregando perfil da vaga...")
        job_profile = app.load_job_profile(perfil_file)
        
        print(f"   ‚úÖ {len(job_profile['requeridos'])} atributos requeridos")
        print(f"   ‚úÖ {len(job_profile['desejaveis'])} atributos desej√°veis")
        
        # Processar candidatos
        curriculos_dir = "curriculos_exemplo"
        if not os.path.exists(curriculos_dir):
            print(f"‚ùå Diret√≥rio de curr√≠culos n√£o encontrado: {curriculos_dir}")
            return
        
        print(f"\nüìÅ Processando curr√≠culos em: {curriculos_dir}")
        candidates_data = app.process_candidates(curriculos_dir, job_profile)
        
        if not candidates_data:
            print("‚ùå Nenhum candidato foi processado")
            return
        
        print(f"   ‚úÖ {len(candidates_data)} candidatos processados")
        
        # Mostrar estat√≠sticas
        total_score = sum(c.get('pontuacao_total', 0) for c in candidates_data)
        avg_score = total_score / len(candidates_data)
        best_candidate = max(candidates_data, key=lambda x: x.get('pontuacao_total', 0))
        
        print(f"\nüìä ESTAT√çSTICAS:")
        print(f"   Pontua√ß√£o m√©dia: {avg_score:.2f}")
        print(f"   Melhor candidato: {best_candidate.get('contato', {}).get('nome', 'N/A')} - {best_candidate.get('pontuacao_total', 0)} pontos")
        
        # Gerar relat√≥rio
        print(f"\nüìÑ Gerando relat√≥rio Excel...")
        excel_file = app.generate_report(candidates_data, job_profile, "relatorio_avancado.xlsx")
        
        print(f"   ‚úÖ Relat√≥rio salvo em: {excel_file}")
        
    except Exception as e:
        print(f"‚ùå Erro durante a execu√ß√£o: {e}")

def criar_estrutura_exemplo():
    """Cria estrutura de exemplo para teste"""
    print("\n=== CRIANDO ESTRUTURA DE EXEMPLO ===")
    
    # Criar diret√≥rio de exemplo
    curriculos_dir = "curriculos_exemplo"
    if not os.path.exists(curriculos_dir):
        os.makedirs(curriculos_dir)
        print(f"üìÅ Diret√≥rio criado: {curriculos_dir}")
    else:
        print(f"üìÅ Diret√≥rio j√° existe: {curriculos_dir}")
    
    # Criar arquivo de exemplo de curr√≠culo
    exemplo_cv = os.path.join(curriculos_dir, "exemplo_curriculo.txt")
    if not os.path.exists(exemplo_cv):
        with open(exemplo_cv, 'w', encoding='utf-8') as f:
            f.write("""JO√ÉO SILVA
joao.silva@email.com
(11) 99999-9999

EXPERI√äNCIA PROFISSIONAL
Desenvolvedor Python Senior - Empresa XYZ (2020-2023)
- Desenvolvimento de aplica√ß√µes web com Django e Flask
- Experi√™ncia com PostgreSQL e MySQL
- Implementa√ß√£o de APIs REST
- Uso de Docker para containeriza√ß√£o
- Testes automatizados com pytest
- Experi√™ncia com AWS (EC2, S3, RDS)
- Ingl√™s fluente (leitura e escrita)
- Trabalho em metodologias √°geis (Scrum)

Desenvolvedor Python - Empresa ABC (2018-2020)
- Desenvolvimento de scripts Python
- Trabalho com Git e controle de vers√£o
- Conhecimento em machine learning b√°sico

FORMA√á√ÉO
Bacharelado em Ci√™ncia da Computa√ß√£o - Universidade XYZ (2014-2018)

CERTIFICA√á√ïES
- AWS Certified Developer
- Docker Certified Associate
""")
        print(f"üìÑ Arquivo de exemplo criado: {exemplo_cv}")
    
    print("\nüí° Para testar com arquivos reais:")
    print(f"   1. Coloque curr√≠culos PDF/DOCX em: {curriculos_dir}")
    print("   2. Execute: python exemplo_uso.py")

def main():
    """Fun√ß√£o principal do exemplo"""
    print("üöÄ TALENTSCAN - EXEMPLO DE USO")
    print("=" * 50)
    
    # Verificar se a API key est√° configurada
    if not os.getenv('OPENAI_API_KEY'):
        print("‚ùå OPENAI_API_KEY n√£o configurada!")
        print("   Configure a vari√°vel de ambiente ou crie um arquivo .env")
        print("   Exemplo: OPENAI_API_KEY=sua_chave_aqui")
        return
    
    # Criar estrutura de exemplo
    criar_estrutura_exemplo()
    
    # Executar exemplos
    exemplo_basico()
    exemplo_avancado()
    
    print("\n" + "=" * 50)
    print("‚úÖ Exemplos conclu√≠dos!")
    print("\nüìö Para mais informa√ß√µes, consulte o README.md")

if __name__ == "__main__":
    main()
